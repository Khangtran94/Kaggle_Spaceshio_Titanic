{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":34377,"databundleVersionId":3220602,"sourceType":"competition"}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/khangtran94vn/spaceship-titanic-khang?scriptVersionId=174045301\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"<a href=\"https://www.kaggle.com/code/khangtran94vn/spaceship-titanic-khang?scriptVersionId=173690783\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-22T03:38:10.741825Z","iopub.execute_input":"2024-04-22T03:38:10.742248Z","iopub.status.idle":"2024-04-22T03:38:11.874292Z","shell.execute_reply.started":"2024-04-22T03:38:10.742203Z","shell.execute_reply":"2024-04-22T03:38:11.873429Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/spaceship-titanic/train.csv')\ntest = pd.read_csv('/kaggle/input/spaceship-titanic/test.csv')\ntrain.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:11.87566Z","iopub.execute_input":"2024-04-22T03:38:11.876107Z","iopub.status.idle":"2024-04-22T03:38:11.988452Z","shell.execute_reply.started":"2024-04-22T03:38:11.876076Z","shell.execute_reply":"2024-04-22T03:38:11.98744Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.tail()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:11.989904Z","iopub.execute_input":"2024-04-22T03:38:11.990207Z","iopub.status.idle":"2024-04-22T03:38:12.012544Z","shell.execute_reply.started":"2024-04-22T03:38:11.990181Z","shell.execute_reply":"2024-04-22T03:38:12.011449Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:12.015886Z","iopub.execute_input":"2024-04-22T03:38:12.016337Z","iopub.status.idle":"2024-04-22T03:38:12.059903Z","shell.execute_reply.started":"2024-04-22T03:38:12.016297Z","shell.execute_reply":"2024-04-22T03:38:12.058784Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.describe(include='all')","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:12.061635Z","iopub.execute_input":"2024-04-22T03:38:12.061968Z","iopub.status.idle":"2024-04-22T03:38:12.151767Z","shell.execute_reply.started":"2024-04-22T03:38:12.061939Z","shell.execute_reply":"2024-04-22T03:38:12.149471Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:12.153679Z","iopub.execute_input":"2024-04-22T03:38:12.155229Z","iopub.status.idle":"2024-04-22T03:38:12.178483Z","shell.execute_reply.started":"2024-04-22T03:38:12.15516Z","shell.execute_reply":"2024-04-22T03:38:12.176693Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"* PassengerId - A unique Id for each passenger. Each Id takes the form gggg_pp where gggg indicates a group the passenger is travelling with and pp is their number within the group. People in a group are often family members, but not always.\n* HomePlanet - The planet the passenger departed from, typically their planet of permanent residence.\n* CryoSleep - Indicates whether the passenger elected to be put into suspended animation for the duration of the voyage. Passengers in cryosleep are confined to their cabins.\n* Cabin - The cabin number where the passenger is staying. Takes the form deck/num/side, where side can be either P for Port or S for Starboard.\n* Destination - The planet the passenger will be debarking to.\n* Age - The age of the passenger.\n* VIP - Whether the passenger has paid for special VIP service during the voyage.\n* RoomService, FoodCourt, ShoppingMall, Spa, VRDeck - Amount the passenger has billed at each of the Spaceship Titanic's many luxury amenities.\n* Name - The first and last names of the passenger.\n* Transported - Whether the passenger was transported to another dimension. This is the target, the column you are trying to predict.","metadata":{}},{"cell_type":"markdown","source":"From these descriptions, we can have some assumptions:\n* **PassengerId**: *gggg_pp* ==> gggg: often family members ==> we can split it into 2 columns.\n* **CryoSleep**: True ==> Sleep ==> No use facility ==> **RoomService, FoodCourt, ShoppingMall, Spa, VRDeck** = 0.\n* Check the relationship between categorical columns: **CryoSleep, Destination, VIP**\n* **Cabin**: Should split into 3 columns: *Deck, Number room and Side* ==> P = Port = Left side of the spaceship, while S = Starboard = Right side of the spaceship.\n* **Name**: Should split into 2 columns: First name and Last name. Check the status of PassengerId for filling value.\n\n\n","metadata":{}},{"cell_type":"markdown","source":"# Overview the dataset:\nWe will transform both datasets to make them consistent\n\n* Category (Nominal) - 4 Columns: HomePlanet, CryoSleep, VIP, Destination.\n* Numerical - 6 Columns: Room Service, FoodCourt, ShoppingMall, Spa, VRDeck, Age.\n* Feature Creation - 3 Columns: PassengerId, Cabin, Name.\n\nColumn to predict: Transported","metadata":{}},{"cell_type":"markdown","source":"## Function Change to Category Types:","metadata":{}},{"cell_type":"code","source":"cat = ['HomePlanet','CryoSleep','VIP','Destination']\ndef change_category(df):\n    for col in cat:\n        df[col] = df[col].astype('category')\n    return df.head()\nchange_category(train)\nchange_category(test)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:12.179712Z","iopub.execute_input":"2024-04-22T03:38:12.180111Z","iopub.status.idle":"2024-04-22T03:38:12.233081Z","shell.execute_reply.started":"2024-04-22T03:38:12.180073Z","shell.execute_reply":"2024-04-22T03:38:12.231695Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Create new columns from PassengerId, Name, Cabin:0\n* PassengerId: gggg_pp ==> gggg column Group_ID;  pp column Person_ID.\n* Name: Split to First Name and Last Name.\n* Cabin: Split to Deck, Number room and Side","metadata":{}},{"cell_type":"code","source":"def update_df(df,status):\n    df[['Group_ID','Person_ID']] = df['PassengerId'].str.split('_',expand=True)\n    df[['First_Name','Last_Name']] = df['Name'].str.split(expand=True)\n    df[['Deck','No_Room','Side']] = df['Cabin'].str.split('/',expand=True)\n    df.drop(['PassengerId','Name','Cabin'],axis=1,inplace=True)\n    if status == 'train':\n        df = df[[*df.columns[11:], *df.columns[:11]]]\n    elif status == 'test':\n        df = df[[*df.columns[10:], *df.columns[:10]]]\n    return df\n\ntest = update_df(test,'test')\ntrain = update_df(train,'train')","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:12.234395Z","iopub.execute_input":"2024-04-22T03:38:12.234715Z","iopub.status.idle":"2024-04-22T03:38:12.333122Z","shell.execute_reply.started":"2024-04-22T03:38:12.234688Z","shell.execute_reply":"2024-04-22T03:38:12.331951Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:12.334671Z","iopub.execute_input":"2024-04-22T03:38:12.335021Z","iopub.status.idle":"2024-04-22T03:38:12.364267Z","shell.execute_reply.started":"2024-04-22T03:38:12.334991Z","shell.execute_reply":"2024-04-22T03:38:12.362983Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:12.368469Z","iopub.execute_input":"2024-04-22T03:38:12.368807Z","iopub.status.idle":"2024-04-22T03:38:12.375153Z","shell.execute_reply.started":"2024-04-22T03:38:12.368779Z","shell.execute_reply":"2024-04-22T03:38:12.374171Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Check missing values:","metadata":{}},{"cell_type":"code","source":"print(train.isnull().sum())\nprint('-'*40)\nprint(test.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:12.376564Z","iopub.execute_input":"2024-04-22T03:38:12.376878Z","iopub.status.idle":"2024-04-22T03:38:12.403466Z","shell.execute_reply.started":"2024-04-22T03:38:12.376851Z","shell.execute_reply":"2024-04-22T03:38:12.402267Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Both dataset have many missing values.","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport missingno as msno\nfig, ax = plt.subplots(1, 2,figsize=(20,10))\nmsno.matrix(train, ax=ax[0]) \nmsno.heatmap(train, ax=ax[1])\nfig.suptitle('Missing Value of Train dataset',fontsize = 24)\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:12.404761Z","iopub.execute_input":"2024-04-22T03:38:12.405056Z","iopub.status.idle":"2024-04-22T03:38:15.738173Z","shell.execute_reply.started":"2024-04-22T03:38:12.405028Z","shell.execute_reply":"2024-04-22T03:38:15.737316Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(1, 2,figsize=(20,10))\nmsno.matrix(test, ax=ax[0]) \nmsno.heatmap(test, ax=ax[1]) \nfig.suptitle('Missing Value of Test dataset',fontsize = 24)\n\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:15.739394Z","iopub.execute_input":"2024-04-22T03:38:15.740346Z","iopub.status.idle":"2024-04-22T03:38:17.470474Z","shell.execute_reply.started":"2024-04-22T03:38:15.74031Z","shell.execute_reply":"2024-04-22T03:38:17.468927Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We can observe a correlation between the columns with missing values with a value of 1. However, this does not make sense for the dataset because those columns are created from the columns we had before .","metadata":{}},{"cell_type":"markdown","source":"## Check duplicate values","metadata":{}},{"cell_type":"code","source":"print('Train dataset have {} duplicated values.'.format(train.duplicated().sum()))\nprint('Test dataset have {} duplicated values.'.format(test.duplicated().sum()))","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:17.471854Z","iopub.execute_input":"2024-04-22T03:38:17.472276Z","iopub.status.idle":"2024-04-22T03:38:17.51038Z","shell.execute_reply.started":"2024-04-22T03:38:17.472241Z","shell.execute_reply":"2024-04-22T03:38:17.509121Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Good news !!! Both dataset don't have any duplicated values.","metadata":{}},{"cell_type":"markdown","source":"# Exploratory Data Analysis:","metadata":{}},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:17.512015Z","iopub.execute_input":"2024-04-22T03:38:17.512457Z","iopub.status.idle":"2024-04-22T03:38:17.54057Z","shell.execute_reply.started":"2024-04-22T03:38:17.512418Z","shell.execute_reply":"2024-04-22T03:38:17.539285Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Column Group_ID","metadata":{}},{"cell_type":"code","source":"group_size = train['Group_ID'].value_counts().to_frame('count').reset_index()\ngroup_size['count'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:17.541912Z","iopub.execute_input":"2024-04-22T03:38:17.542285Z","iopub.status.idle":"2024-04-22T03:38:17.56932Z","shell.execute_reply.started":"2024-04-22T03:38:17.542247Z","shell.execute_reply":"2024-04-22T03:38:17.568406Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(1,2,figsize=(20,7),sharey=True)\nsns.countplot(x = 'Group', data = train['Group_ID'].value_counts().to_frame('Group').reset_index(),ax=ax[0])\nax[0].set_title('Group Size of Train dataset')\n\nsns.countplot(x = 'Group', data = test['Group_ID'].value_counts().to_frame('Group').reset_index(),ax=ax[1])\nax[1].set_title('Group Size of Test dataset')\nplt.tight_layout()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:17.570954Z","iopub.execute_input":"2024-04-22T03:38:17.571877Z","iopub.status.idle":"2024-04-22T03:38:18.258525Z","shell.execute_reply.started":"2024-04-22T03:38:17.571845Z","shell.execute_reply":"2024-04-22T03:38:18.257433Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Most of passenger goes alone. ==> Should create column Group size.","metadata":{}},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:18.260187Z","iopub.execute_input":"2024-04-22T03:38:18.260624Z","iopub.status.idle":"2024-04-22T03:38:18.288179Z","shell.execute_reply.started":"2024-04-22T03:38:18.260586Z","shell.execute_reply":"2024-04-22T03:38:18.286839Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def size(df):\n    group_size = df['Group_ID'].value_counts().to_frame('Group_Size').reset_index()\n    df = df.merge(group_size,how='left',on='Group_ID')\n    return df\ntrain = size(train)\ntest = size(test)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:18.289637Z","iopub.execute_input":"2024-04-22T03:38:18.290275Z","iopub.status.idle":"2024-04-22T03:38:18.327049Z","shell.execute_reply.started":"2024-04-22T03:38:18.290232Z","shell.execute_reply":"2024-04-22T03:38:18.325699Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:18.328503Z","iopub.execute_input":"2024-04-22T03:38:18.328923Z","iopub.status.idle":"2024-04-22T03:38:18.357617Z","shell.execute_reply.started":"2024-04-22T03:38:18.328887Z","shell.execute_reply":"2024-04-22T03:38:18.356466Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Filling missing values","metadata":{}},{"cell_type":"code","source":"# Divide each dataset to two groups: group and alone\n# Total = Group + Alone\ntrain_group = train[train['Group_Size'] > 1]\ntrain_alone = train[train['Group_Size'] == 1] \ntest_group = test[test['Group_Size'] > 1]\ntest_alone = test[test['Group_Size'] == 1] \nprint('Size of Train dataset:',train.shape[0])\nprint('Train group:',train_group.shape[0])\nprint('Train alone:',train_alone.shape[0])\nprint('_'*40)\nprint('Size of Test dataset:',test.shape[0])\nprint('Test group:',test_group.shape[0])\nprint('Test alone:',test_alone.shape[0])","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:18.359429Z","iopub.execute_input":"2024-04-22T03:38:18.360158Z","iopub.status.idle":"2024-04-22T03:38:18.376626Z","shell.execute_reply.started":"2024-04-22T03:38:18.360116Z","shell.execute_reply":"2024-04-22T03:38:18.375107Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 1. For passengers traveling in groups:","metadata":{}},{"cell_type":"code","source":"train_group.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:18.378026Z","iopub.execute_input":"2024-04-22T03:38:18.378671Z","iopub.status.idle":"2024-04-22T03:38:18.404821Z","shell.execute_reply.started":"2024-04-22T03:38:18.37864Z","shell.execute_reply":"2024-04-22T03:38:18.40387Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"* Approach: This is normal when you travel in a group. \n* We can assume that they will have the same Last Name, same Deck, No_Room, Side, HomePlanet,Destination,VIP and CryoSleep.\n* When CryoSleep = True => invoice with missing value will = 0 because you do nothing while sleeping.","metadata":{}},{"cell_type":"code","source":"# Get columns First Name, Last Name, same Deck, No_Room, Side, HomePlanet,Destination,VIP and CryoSleep.\nid = train.columns[:10].to_list() + [train.columns[11]]\n\n# Fill missing values for category columns of both dataset train_group and set_group\ndef fill_cat_group(df):\n    df.update(df[id].fillna(method = 'ffill'))\nfill_cat_group(train_group)\nfill_cat_group(test_group)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:18.406501Z","iopub.execute_input":"2024-04-22T03:38:18.407083Z","iopub.status.idle":"2024-04-22T03:38:18.469991Z","shell.execute_reply.started":"2024-04-22T03:38:18.40705Z","shell.execute_reply":"2024-04-22T03:38:18.468806Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Row have missing values of numerical columns:',train_group.shape[0],'rows.')\nprint('Row have missing values of numerical columns while passengers still sleeping:',train_group[train_group['CryoSleep'] == True].shape[0],'rows.')","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:18.472485Z","iopub.execute_input":"2024-04-22T03:38:18.473127Z","iopub.status.idle":"2024-04-22T03:38:18.479587Z","shell.execute_reply.started":"2024-04-22T03:38:18.473096Z","shell.execute_reply":"2024-04-22T03:38:18.478776Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### a. For passengers traveling in groups while sleeping:","metadata":{}},{"cell_type":"code","source":"# Total = Group + Alone\n# Group = Sleep True + Sleep False\n# With Sleep True => Price = 0 and Age = mean()\ntrg_sleep = train_group[train_group['CryoSleep'] == True]\ntg_sleep = test_group[test_group['CryoSleep'] == True]\nprice = train.columns[12:17]\ndef fill_sleep_price(df):\n    df.update(df[price].fillna(0))                          # While sleeping they use nothing\n    df.update(df['Age'].fillna(df['Age'].mean()))           # Replace = mean of all Age\nfill_sleep_price(trg_sleep)\nfill_sleep_price(tg_sleep)\ntg_sleep.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:18.48071Z","iopub.execute_input":"2024-04-22T03:38:18.481391Z","iopub.status.idle":"2024-04-22T03:38:18.514604Z","shell.execute_reply.started":"2024-04-22T03:38:18.481345Z","shell.execute_reply":"2024-04-22T03:38:18.513571Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### b. For passengers traveling in groups while awake:","metadata":{}},{"cell_type":"code","source":"# Total = Group + Alone\n# Group = Sleep True + Sleep False\n# With Sleep False \ntrg_awake = train_group[train_group['CryoSleep'] == False]\ntg_awake = test_group[test_group['CryoSleep'] == False]\n\n### Get columns with missing values\nnew = [i for i in range(10,17) if i != 11]\ntrain.columns[new]","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:18.515915Z","iopub.execute_input":"2024-04-22T03:38:18.516232Z","iopub.status.idle":"2024-04-22T03:38:18.528171Z","shell.execute_reply.started":"2024-04-22T03:38:18.516193Z","shell.execute_reply":"2024-04-22T03:38:18.527061Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, axes = plt.subplots(nrows=3, ncols=2, figsize=(12, 10))\n\n# Flatten the axes array for easier iteration\naxes = axes.flatten()\n\n# Iterate over each column index\nfor i, ax in zip(new, axes):\n    # Plot histplot with KDE for the corresponding column index\n    sns.histplot(trg_awake.iloc[:, i], kde=True, ax=ax,bins=10)\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:18.529654Z","iopub.execute_input":"2024-04-22T03:38:18.530091Z","iopub.status.idle":"2024-04-22T03:38:20.485595Z","shell.execute_reply.started":"2024-04-22T03:38:18.530054Z","shell.execute_reply":"2024-04-22T03:38:20.48424Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"> We can see that the distribution of most features is right-skewed. Therefore, it is appropriate to fill missing values with the median values to maintain the integrity of the distribution.","metadata":{}},{"cell_type":"code","source":"def fill_awake_group(df):\n    fill_values = df.iloc[:,new].median()\n    df.iloc[:, new] = df.iloc[:, new].fillna(fill_values)\n    return df\ntrg_awake = fill_awake_group(trg_awake)\ntg_awake = fill_awake_group(tg_awake)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.494171Z","iopub.execute_input":"2024-04-22T03:38:20.494579Z","iopub.status.idle":"2024-04-22T03:38:20.514412Z","shell.execute_reply.started":"2024-04-22T03:38:20.494547Z","shell.execute_reply":"2024-04-22T03:38:20.513356Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### c. Combine Group Awake + Group Sleep = Group","metadata":{}},{"cell_type":"code","source":"train_group = pd.concat([trg_sleep,trg_awake],axis=0)\ntest_group = pd.concat([tg_sleep,tg_awake],axis=0)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.515665Z","iopub.execute_input":"2024-04-22T03:38:20.516311Z","iopub.status.idle":"2024-04-22T03:38:20.528988Z","shell.execute_reply.started":"2024-04-22T03:38:20.516281Z","shell.execute_reply":"2024-04-22T03:38:20.527901Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_group.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.53049Z","iopub.execute_input":"2024-04-22T03:38:20.530813Z","iopub.status.idle":"2024-04-22T03:38:20.544209Z","shell.execute_reply.started":"2024-04-22T03:38:20.530787Z","shell.execute_reply":"2024-04-22T03:38:20.542921Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_group.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.545586Z","iopub.execute_input":"2024-04-22T03:38:20.545998Z","iopub.status.idle":"2024-04-22T03:38:20.557355Z","shell.execute_reply.started":"2024-04-22T03:38:20.545968Z","shell.execute_reply":"2024-04-22T03:38:20.556079Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2. For passengers traveling alone:","metadata":{}},{"cell_type":"markdown","source":"> With the same approach, we then split into two group: sleep and awake","metadata":{}},{"cell_type":"code","source":"train_alone.loc[:,'CryoSleep'] = train_alone.loc[:,'CryoSleep'].fillna(train_alone.loc[:,'CryoSleep'].mode()[0])\ntest_alone.loc[:,'CryoSleep'] = test_alone.loc[:,'CryoSleep'].fillna(test_alone.loc[:,'CryoSleep'].mode()[0])\ntest_alone['CryoSleep'].value_counts(dropna=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.559013Z","iopub.execute_input":"2024-04-22T03:38:20.559861Z","iopub.status.idle":"2024-04-22T03:38:20.576205Z","shell.execute_reply.started":"2024-04-22T03:38:20.559821Z","shell.execute_reply":"2024-04-22T03:38:20.575211Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"tra_sleep = train_alone[train_alone['CryoSleep'] == True]\ntra_awake = train_alone[train_alone['CryoSleep'] == False]\nta_sleep = test_alone[test_alone['CryoSleep'] == True]\nta_awake = test_alone[test_alone['CryoSleep'] == False]","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.577364Z","iopub.execute_input":"2024-04-22T03:38:20.578066Z","iopub.status.idle":"2024-04-22T03:38:20.591781Z","shell.execute_reply.started":"2024-04-22T03:38:20.578035Z","shell.execute_reply":"2024-04-22T03:38:20.590303Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Alone Train:',train_alone.shape[0])\nprint('Train sleep:',tra_sleep.shape[0])\nprint('Train awake:',tra_awake.shape[0])\nprint('_'*80)\nprint('Alone Test:',test_alone.shape[0])\nprint('Test sleep:',ta_sleep.shape[0])\nprint('Test awake:',ta_awake.shape[0])\nprint('_'*80)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.593088Z","iopub.execute_input":"2024-04-22T03:38:20.593427Z","iopub.status.idle":"2024-04-22T03:38:20.604979Z","shell.execute_reply.started":"2024-04-22T03:38:20.593397Z","shell.execute_reply":"2024-04-22T03:38:20.603717Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### a. Alone Sleep","metadata":{}},{"cell_type":"code","source":"# We use the fill_sleep_price function again\nprice = train.columns[12:17]\ndef fill_sleep_price(df):\n    df.update(df[price].fillna(0))  # While sleeping they use nothing\n    df.update(df['Age'].fillna(df['Age'].mean()))\n    return df  # Return the modified DataFrame\n\ntra_sleep = fill_sleep_price(tra_sleep)\nta_sleep = fill_sleep_price(ta_sleep)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.606343Z","iopub.execute_input":"2024-04-22T03:38:20.606877Z","iopub.status.idle":"2024-04-22T03:38:20.629644Z","shell.execute_reply.started":"2024-04-22T03:38:20.606847Z","shell.execute_reply":"2024-04-22T03:38:20.628668Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"other_indices = [i for i in range(2, 12) if i not in (8, 10)]\nmode = []\nfor index in other_indices:\n    mode_value = tra_sleep.iloc[:, index].mode()[0]\n    column_name = tra_sleep.columns[index]\n    print('The mode of column \"{}\" is {}'.format(column_name, mode_value))","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.630778Z","iopub.execute_input":"2024-04-22T03:38:20.631562Z","iopub.status.idle":"2024-04-22T03:38:20.644708Z","shell.execute_reply.started":"2024-04-22T03:38:20.63153Z","shell.execute_reply":"2024-04-22T03:38:20.643762Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def fill_sleep_alone(df):\n    for index in other_indices:\n        mode_value = df.iloc[:, index].mode()[0]\n        column_name = df.columns[index]\n        df.loc[:,column_name] = df.loc[:,column_name].fillna(mode_value)\n    return df\n\ntra_sleep = fill_sleep_alone(tra_sleep)\nta_sleep = fill_sleep_alone(ta_sleep)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.646026Z","iopub.execute_input":"2024-04-22T03:38:20.647086Z","iopub.status.idle":"2024-04-22T03:38:20.673586Z","shell.execute_reply.started":"2024-04-22T03:38:20.647031Z","shell.execute_reply":"2024-04-22T03:38:20.672411Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"tra_sleep.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.675274Z","iopub.execute_input":"2024-04-22T03:38:20.675739Z","iopub.status.idle":"2024-04-22T03:38:20.687407Z","shell.execute_reply.started":"2024-04-22T03:38:20.675664Z","shell.execute_reply":"2024-04-22T03:38:20.686441Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ta_sleep.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.688839Z","iopub.execute_input":"2024-04-22T03:38:20.689573Z","iopub.status.idle":"2024-04-22T03:38:20.704641Z","shell.execute_reply.started":"2024-04-22T03:38:20.689543Z","shell.execute_reply":"2024-04-22T03:38:20.703778Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### b. Alone Awake","metadata":{}},{"cell_type":"markdown","source":"> Use fill_awake_group function and also fill mode as last step","metadata":{}},{"cell_type":"code","source":"other_indices = [i for i in range(2, 12) if i not in (8, 10)]\nmode = []\n    \ndef fill_awake_alone(df):\n    for index in other_indices:\n        mode_value = df.iloc[:, index].mode()[0]\n        column_name = df.columns[index]\n        df.loc[:,column_name] = df.loc[:,column_name].fillna(mode_value)\n    return df\n\ntra_awake = fill_awake_alone(tra_awake)\nta_awake = fill_awake_alone(ta_awake)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.706105Z","iopub.execute_input":"2024-04-22T03:38:20.706811Z","iopub.status.idle":"2024-04-22T03:38:20.744294Z","shell.execute_reply.started":"2024-04-22T03:38:20.706778Z","shell.execute_reply":"2024-04-22T03:38:20.743126Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def fill_awake(df):\n    for i in df.columns:\n        if df[i].isnull().sum() != 0:\n            df.loc[:,i] = df.loc[:,i].fillna(df.loc[:,i].median())\n\nfill_awake(tra_awake)\nfill_awake(ta_awake)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.745571Z","iopub.execute_input":"2024-04-22T03:38:20.74588Z","iopub.status.idle":"2024-04-22T03:38:20.775078Z","shell.execute_reply.started":"2024-04-22T03:38:20.745853Z","shell.execute_reply":"2024-04-22T03:38:20.774021Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"tra_awake.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.77644Z","iopub.execute_input":"2024-04-22T03:38:20.776763Z","iopub.status.idle":"2024-04-22T03:38:20.789729Z","shell.execute_reply.started":"2024-04-22T03:38:20.776736Z","shell.execute_reply":"2024-04-22T03:38:20.788636Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ta_awake.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.790999Z","iopub.execute_input":"2024-04-22T03:38:20.79137Z","iopub.status.idle":"2024-04-22T03:38:20.802577Z","shell.execute_reply.started":"2024-04-22T03:38:20.79134Z","shell.execute_reply":"2024-04-22T03:38:20.801707Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### c. Combine Alone Awake + Alone Sleep = Alone","metadata":{}},{"cell_type":"code","source":"train_alone = pd.concat([tra_sleep,tra_awake])\ntest_alone = pd.concat([ta_sleep,ta_awake])","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.803636Z","iopub.execute_input":"2024-04-22T03:38:20.803962Z","iopub.status.idle":"2024-04-22T03:38:20.818662Z","shell.execute_reply.started":"2024-04-22T03:38:20.803933Z","shell.execute_reply":"2024-04-22T03:38:20.817634Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_alone.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.820581Z","iopub.execute_input":"2024-04-22T03:38:20.820938Z","iopub.status.idle":"2024-04-22T03:38:20.836554Z","shell.execute_reply.started":"2024-04-22T03:38:20.820909Z","shell.execute_reply":"2024-04-22T03:38:20.835525Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_alone.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.837611Z","iopub.execute_input":"2024-04-22T03:38:20.837967Z","iopub.status.idle":"2024-04-22T03:38:20.851306Z","shell.execute_reply.started":"2024-04-22T03:38:20.837937Z","shell.execute_reply":"2024-04-22T03:38:20.849969Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_filter = pd.concat([train_group,train_alone])\ntest_filter = pd.concat([test_group,test_alone])","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.85272Z","iopub.execute_input":"2024-04-22T03:38:20.853088Z","iopub.status.idle":"2024-04-22T03:38:20.869676Z","shell.execute_reply.started":"2024-04-22T03:38:20.853059Z","shell.execute_reply":"2024-04-22T03:38:20.868392Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Visualization:","metadata":{}},{"cell_type":"code","source":"train_filter.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.871011Z","iopub.execute_input":"2024-04-22T03:38:20.871365Z","iopub.status.idle":"2024-04-22T03:38:20.907161Z","shell.execute_reply.started":"2024-04-22T03:38:20.871336Z","shell.execute_reply":"2024-04-22T03:38:20.906082Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Category columns:","metadata":{}},{"cell_type":"code","source":"train_filter['Deck'] = train_filter['Deck'].astype('category')\n\ncols = ['Deck', 'Side', 'HomePlanet', 'CryoSleep', 'Destination', 'VIP', 'Group_Size']\nrows = len(cols)\n\nfig, axes = plt.subplots(rows, 2, figsize=(12, rows * 4))  # Adjust figsize as needed\n\nfor i, col in enumerate(cols):\n    sns.countplot(x=col, data=train_filter, ax=axes[i, 0])\n    axes[i, 0].set_title(f'Type of {col}')\n\n    sns.countplot(x=col, data=train_filter, hue='Transported', ax=axes[i, 1])\n    axes[i, 1].set_title(f'Type of {col} (by Transported)')\nplt.tight_layout()\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:20.908601Z","iopub.execute_input":"2024-04-22T03:38:20.909005Z","iopub.status.idle":"2024-04-22T03:38:24.460818Z","shell.execute_reply.started":"2024-04-22T03:38:20.908968Z","shell.execute_reply":"2024-04-22T03:38:24.459567Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.countplot(x='Transported',data=train_filter)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:24.462337Z","iopub.execute_input":"2024-04-22T03:38:24.462804Z","iopub.status.idle":"2024-04-22T03:38:24.681998Z","shell.execute_reply.started":"2024-04-22T03:38:24.46277Z","shell.execute_reply":"2024-04-22T03:38:24.681185Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Numerical columns:","metadata":{}},{"cell_type":"code","source":"train_filter.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:24.683199Z","iopub.execute_input":"2024-04-22T03:38:24.683528Z","iopub.status.idle":"2024-04-22T03:38:24.717867Z","shell.execute_reply.started":"2024-04-22T03:38:24.683501Z","shell.execute_reply":"2024-04-22T03:38:24.716645Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_filter['No_Room'] = train_filter['No_Room'].astype('int')\nnums = [i for i in train_filter.columns if train_filter[i].dtype not in ['object', 'category','bool']]\nsns.heatmap(train_filter[nums].corr(),annot=True,cmap='Accent')","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:24.719546Z","iopub.execute_input":"2024-04-22T03:38:24.719898Z","iopub.status.idle":"2024-04-22T03:38:25.303102Z","shell.execute_reply.started":"2024-04-22T03:38:24.719852Z","shell.execute_reply":"2024-04-22T03:38:25.301976Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, axes = plt.subplots(len(nums), 2, figsize=(12, len(nums) * 4))  # Adjust figsize as needed\n\nfor i, num in enumerate(nums):\n    sns.violinplot(y=num, data=train_filter, ax=axes[i, 0])\n    axes[i, 0].set_title(f'Violinplot of {num}')\n\n    sns.violinplot(y=num, data=train_filter, x='Transported', ax=axes[i, 1])\n    axes[i, 1].set_title(f'Violinplot of {num} (by Transported)')\nplt.tight_layout()\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:25.304745Z","iopub.execute_input":"2024-04-22T03:38:25.30526Z","iopub.status.idle":"2024-04-22T03:38:29.625173Z","shell.execute_reply.started":"2024-04-22T03:38:25.305204Z","shell.execute_reply":"2024-04-22T03:38:29.623993Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Prepare for modelling:\n* Remove column Group Name, Last Name, Group ID, Person ID\n* Convert the values in **Transported** to numeric value.\n* Define category and numerical columns\n* Define X, y","metadata":{}},{"cell_type":"code","source":"train_filter['PassengerId'] = train['Group_ID'] + '_' + train['Person_ID']\ntest_filter['PassengerId'] = test['Group_ID'] + '_' + test['Person_ID']\n\ntrain_original = pd.read_csv('/kaggle/input/spaceship-titanic/train.csv')\ntest_original = pd.read_csv('/kaggle/input/spaceship-titanic/test.csv')\n\ntrain_original = train_original[['PassengerId']]\ntest_original = test_original[['PassengerId']]\n\nmtrain = train_original.merge(train_filter,how='left',on='PassengerId')\nmtest = test_original.merge(test_filter,how='left',on='PassengerId')\n\ncol_drop = ['Group_ID','Person_ID','First_Name','Last_Name']\nmtrain.drop(col_drop,axis=1,inplace=True)\nmtest.drop(col_drop,axis=1,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:29.627178Z","iopub.execute_input":"2024-04-22T03:38:29.627622Z","iopub.status.idle":"2024-04-22T03:38:29.727511Z","shell.execute_reply.started":"2024-04-22T03:38:29.627585Z","shell.execute_reply":"2024-04-22T03:38:29.726172Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Convert value from Transported to numeric values.","metadata":{}},{"cell_type":"code","source":"mtrain['Transported']= mtrain['Transported'].replace({True:1,False:0})","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:29.73203Z","iopub.execute_input":"2024-04-22T03:38:29.732408Z","iopub.status.idle":"2024-04-22T03:38:29.747808Z","shell.execute_reply.started":"2024-04-22T03:38:29.73238Z","shell.execute_reply":"2024-04-22T03:38:29.746482Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Define features and target variables","metadata":{}},{"cell_type":"code","source":"# Column category\nmtrain['No_Room'] = mtrain['No_Room'].astype('int')\nmtest['No_Room'] = mtest['No_Room'].astype('int')\nmtrain['Side'] = mtrain['Side'].astype('category')\nmtest['Side'] = mtest['Side'].astype('category')\n\ncat_features = ['Group_Size','Deck','Side','HomePlanet','CryoSleep','Destination','VIP']\nnum_features = ['No_Room','Age','RoomService','FoodCourt','ShoppingMall','Spa','VRDeck']\n\nX_train = mtrain.drop(['PassengerId','Transported'],axis=1)\ny_train = mtrain[['Transported']]\nX_test = mtest.drop(['PassengerId'],axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:29.749025Z","iopub.execute_input":"2024-04-22T03:38:29.749375Z","iopub.status.idle":"2024-04-22T03:38:29.765488Z","shell.execute_reply.started":"2024-04-22T03:38:29.749345Z","shell.execute_reply":"2024-04-22T03:38:29.764336Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:29.767058Z","iopub.execute_input":"2024-04-22T03:38:29.767485Z","iopub.status.idle":"2024-04-22T03:38:29.793173Z","shell.execute_reply.started":"2024-04-22T03:38:29.767453Z","shell.execute_reply":"2024-04-22T03:38:29.791975Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Define X_val, y_val from X_train, y_train","metadata":{}},{"cell_type":"code","source":"# from sklearn.model_selection import train_test_split\n# X_learn, X_val, y_learn, y_val = train_test_split(X_train,y_train,test_size = 0.3,random_state=12)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:29.794465Z","iopub.execute_input":"2024-04-22T03:38:29.794899Z","iopub.status.idle":"2024-04-22T03:38:29.801475Z","shell.execute_reply.started":"2024-04-22T03:38:29.794859Z","shell.execute_reply":"2024-04-22T03:38:29.80061Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Label Encoder for cat_features, Standard Scaler for num_features","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import RobustScaler\nsc = RobustScaler()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:29.802619Z","iopub.execute_input":"2024-04-22T03:38:29.802913Z","iopub.status.idle":"2024-04-22T03:38:29.991909Z","shell.execute_reply.started":"2024-04-22T03:38:29.802888Z","shell.execute_reply":"2024-04-22T03:38:29.990813Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# X_learn_cat = X_learn[cat_features]\n# X_val_cat = X_val[cat_features]\n\nX_train_cat = X_train[cat_features]\nX_train_num = X_train[num_features]\nX_test_cat = X_test[cat_features]\n\n# X_learn_num = X_learn[num_features]\n# X_val_num = X_val[num_features]\nX_test_num = X_test[num_features]","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:29.993463Z","iopub.execute_input":"2024-04-22T03:38:29.99387Z","iopub.status.idle":"2024-04-22T03:38:30.003986Z","shell.execute_reply.started":"2024-04-22T03:38:29.993832Z","shell.execute_reply":"2024-04-22T03:38:30.002725Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"* Category: Pandas get dummies\n* Robust Scaler for numerical","metadata":{}},{"cell_type":"markdown","source":"one hot encoder for category columns.","metadata":{}},{"cell_type":"code","source":"# dum_X_learn = pd.get_dummies(X_learn_cat,dtype=int,columns = cat_features).reset_index(drop=True)\n# dum_X_val = pd.get_dummies(X_val_cat,dtype=int,columns = cat_features).reset_index(drop=True)\n# dum_X_test = pd.get_dummies(X_test_cat, dtype=int,columns = cat_features).reset_index(drop=True)\n# dum_X_test.isnull().sum()\n\n# sc_X_learn = pd.DataFrame(sc.fit_transform(X_learn_num),columns = X_learn_num.columns).reset_index(drop=True)\n# sc_X_val = pd.DataFrame(sc.transform(X_val_num),columns = X_val_num.columns).reset_index(drop=True)\n# sc_X_test = pd.DataFrame(sc.transform(X_test_num),columns = X_test_num.columns).reset_index(drop=True)\n# X_test_num.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:30.005926Z","iopub.execute_input":"2024-04-22T03:38:30.006538Z","iopub.status.idle":"2024-04-22T03:38:30.013376Z","shell.execute_reply.started":"2024-04-22T03:38:30.006499Z","shell.execute_reply":"2024-04-22T03:38:30.012343Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Scaler for number columns.","metadata":{}},{"cell_type":"code","source":"dum_X_train = pd.get_dummies(X_train_cat,dtype=int,columns = cat_features).reset_index(drop=True)\n# dum_X_val = pd.get_dummies(X_val_cat,dtype=int,columns = cat_features).reset_index(drop=True)\ndum_X_test = pd.get_dummies(X_test_cat, dtype=int,columns = cat_features).reset_index(drop=True)\n# dum_X_test.isnull().sum()\n\nsc_X_train = pd.DataFrame(sc.fit_transform(X_train_num),columns = X_train_num.columns).reset_index(drop=True)\n# sc_X_val = pd.DataFrame(sc.transform(X_val_num),columns = X_val_num.columns).reset_index(drop=True)\nsc_X_test = pd.DataFrame(sc.transform(X_test_num),columns = X_test_num.columns).reset_index(drop=True)\n# X_test_num.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:30.014895Z","iopub.execute_input":"2024-04-22T03:38:30.015361Z","iopub.status.idle":"2024-04-22T03:38:30.059919Z","shell.execute_reply.started":"2024-04-22T03:38:30.015309Z","shell.execute_reply":"2024-04-22T03:38:30.058635Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# total_X_train = pd.concat([dum_X_learn,sc_X_learn],axis=1)\ntotal_X_train = pd.concat([dum_X_train,sc_X_train],axis=1)\n# total_X_val = pd.concat([dum_X_val,sc_X_val],axis=1)\ntotal_X_test = pd.concat([dum_X_test,sc_X_test],axis=1)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:30.061504Z","iopub.execute_input":"2024-04-22T03:38:30.061839Z","iopub.status.idle":"2024-04-22T03:38:30.070616Z","shell.execute_reply.started":"2024-04-22T03:38:30.06181Z","shell.execute_reply":"2024-04-22T03:38:30.069428Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Fit Logistic Regression:","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom scipy.stats import uniform","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:30.072294Z","iopub.execute_input":"2024-04-22T03:38:30.072613Z","iopub.status.idle":"2024-04-22T03:38:30.3172Z","shell.execute_reply.started":"2024-04-22T03:38:30.072588Z","shell.execute_reply":"2024-04-22T03:38:30.315967Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Logistic Regression:","metadata":{}},{"cell_type":"code","source":"\nparam_dist = {\n    'solver': ['newton-cg', 'lbfgs', 'liblinear'],\n    'C': np.logspace(-4, 4, 10)  # Discrete values for max_iter\n}\n\n# # Initialize logistic regression classifier\n# logreg_classifier = LogisticRegression()\n# y_train = np.ravel(y_train)\n\n# # Initialize RandomizedSearchCV\n# random_search = RandomizedSearchCV(estimator=logreg_classifier, param_distributions=param_dist, n_iter=50, cv=5, random_state=42)\n\n# # Fit RandomizedSearchCV\n# random_search.fit(total_X_train, y_train)\n\n# # Get the best parameters\n# best_params_lr = random_search.best_params_\n\n# # Get the best model\n# best_model_lr = random_search.best_estimator_\n\n# print(best_params)\n# print(best_model_lr)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:39:57.423133Z","iopub.execute_input":"2024-04-22T03:39:57.423712Z","iopub.status.idle":"2024-04-22T03:40:10.413017Z","shell.execute_reply.started":"2024-04-22T03:39:57.423672Z","shell.execute_reply":"2024-04-22T03:40:10.410946Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# SVM:","metadata":{}},{"cell_type":"code","source":"from sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\ny_train = np.ravel(y_train)\n\n# Create an SVC object with a scoring metric\nsvc = SVC()  # Or other binary classification metric like 'f1'\n\n# y_pred_svc = svc.predict(total_X_test)\n# print(classification_report(y_val,y_pred_svc))","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:58.677549Z","iopub.execute_input":"2024-04-22T03:38:58.678076Z","iopub.status.idle":"2024-04-22T03:38:58.683306Z","shell.execute_reply.started":"2024-04-22T03:38:58.678046Z","shell.execute_reply":"2024-04-22T03:38:58.682263Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Decision Tree","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\nparam_dist = {\n    \"max_depth\": range(3, 10),  # Integer range for max_depth\n    \"min_samples_split\": range(2, 11),  # Integer range for min_samples_split\n    \"min_samples_leaf\": range(1, 6),  # Integer range for min_samples_leaf\n    \"max_features\": [\"sqrt\"]  # List of options for max_features\n}\n\nrandom_search = RandomizedSearchCV(dt, param_dist, scoring=\"accuracy\", cv=5, n_iter=100)\n\n# Fit the random search on training data\nrandom_search.fit(total_X_train, y_train)\n\n# Get the best performing model and its parameters\nbest_model_dt = random_search.best_estimator_\nbest_params_dt = random_search.best_params_\n\nprint(best_model_dt)\n\nprint(best_params_dt)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:38:58.684808Z","iopub.execute_input":"2024-04-22T03:38:58.685527Z","iopub.status.idle":"2024-04-22T03:39:05.096656Z","shell.execute_reply.started":"2024-04-22T03:38:58.685496Z","shell.execute_reply":"2024-04-22T03:39:05.095595Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# XGB Boost:","metadata":{}},{"cell_type":"code","source":"from xgboost import XGBClassifier\n\n# Define the model parameters (adjust as needed)\nmodel_params = {\n    'objective': 'binary:logistic',  # Binary classification with logistic loss\n    'n_estimators': 100,            # Number of boosting trees\n    'learning_rate': 0.1,           # Learning rate for each boosting step\n    'max_depth': 5,                 # Maximum depth of individual trees\n    'subsample': 0.8,               # Fraction of samples used per tree\n    'colsample_bytree': 0.7,         # Fraction of features used per tree\n    'random_state': 42              # Set random seed for reproducibility\n}\n\n# Create the XGBClassifier model\nxgb = XGBClassifier(**model_params)\n\n# Train the model on your data\nxgb.fit(total_X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:39:05.097937Z","iopub.execute_input":"2024-04-22T03:39:05.098366Z","iopub.status.idle":"2024-04-22T03:39:05.601363Z","shell.execute_reply.started":"2024-04-22T03:39:05.098336Z","shell.execute_reply":"2024-04-22T03:39:05.600327Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# RandomForest","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nrf_classifier = RandomForestClassifier(n_estimators=100,max_depth=9, max_features='sqrt', min_samples_leaf=5,\n                       min_samples_split=9)\n\n# Perform grid search on the training data\nrf_classifier.fit(total_X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:39:05.605607Z","iopub.execute_input":"2024-04-22T03:39:05.606597Z","iopub.status.idle":"2024-04-22T03:39:06.553316Z","shell.execute_reply.started":"2024-04-22T03:39:05.606562Z","shell.execute_reply":"2024-04-22T03:39:06.552471Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Voting Classifier for Logistic Regression, XGB Classifier, Random Forest","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import VotingClassifier\n\nlog_reg = LogisticRegression(C=0.005994842503189409, solver='liblinear')\n\nvoting_clf = VotingClassifier(estimators=[('lr', log_reg), ('xgb', xgb), ('rf', rf_classifier)],voting='soft')\nvoting_clf.fit(total_X_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:49:09.026344Z","iopub.execute_input":"2024-04-22T03:49:09.027498Z","iopub.status.idle":"2024-04-22T03:49:10.234561Z","shell.execute_reply.started":"2024-04-22T03:49:09.027457Z","shell.execute_reply":"2024-04-22T03:49:10.233404Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Light GBM:","metadata":{}},{"cell_type":"code","source":"import lightgbm as lgb\n\nlgb = lgb.LGBMClassifier(objective= 'binary',  # Specify binary classification\n    metric= 'binary_logloss',  # Metric for evaluation (binary log loss)\n    learning_rate= 0.1,  # Learning rate\n    max_depth= -1)\nlgb.fit(total_X_train,y_train)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Catboost","metadata":{}},{"cell_type":"code","source":"import catboost as cb\ncb = cb.CatBoostClassifier(n_estimators=100, learning_rate = 0.1, max_depth=3)\ncb.fit(total_X_train,y_train)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Final Predict","metadata":{}},{"cell_type":"code","source":"y_test = cb.predict(total_X_test)\ny_test.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:49:14.959656Z","iopub.execute_input":"2024-04-22T03:49:14.960277Z","iopub.status.idle":"2024-04-22T03:49:15.127727Z","shell.execute_reply.started":"2024-04-22T03:49:14.960235Z","shell.execute_reply":"2024-04-22T03:49:15.126436Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Output to submit","metadata":{}},{"cell_type":"code","source":"submit = pd.read_csv('/kaggle/input/spaceship-titanic/test.csv')\nsubmit = submit[['PassengerId']]\nsubmit['Transported'] = y_test\nsubmit['Transported'] = submit['Transported'].astype(bool)\nsubmit","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:49:17.267477Z","iopub.execute_input":"2024-04-22T03:49:17.267858Z","iopub.status.idle":"2024-04-22T03:49:17.300568Z","shell.execute_reply.started":"2024-04-22T03:49:17.267829Z","shell.execute_reply":"2024-04-22T03:49:17.299404Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submit.to_csv('submission.csv',index=False)","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:49:19.861639Z","iopub.execute_input":"2024-04-22T03:49:19.862237Z","iopub.status.idle":"2024-04-22T03:49:19.874186Z","shell.execute_reply.started":"2024-04-22T03:49:19.862193Z","shell.execute_reply":"2024-04-22T03:49:19.873059Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}